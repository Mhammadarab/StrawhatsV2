name: CI/CD - test

on:
  workflow_call:
    inputs:
      DEPLOY_WEBHOOK_URL:
        type: string
        required: true

env:
  DOTNET_INSTALL_DIR: "./.dotnet"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@main
        with:
          dotnet-version: "8.x"

      - name: Install .NET dependencies
        run: dotnet restore

      - name: Run code formatting check
        run: dotnet format --verify-no-changes
        continue-on-error: true

      - name: Run .NET unit tests with coverage
        run: |
          dotnet test --configuration Release --no-restore --collect:"XPlat Code Coverage" --results-directory ./TestResults --logger "trx;LogFileName=unit_tests.trx"
          reportgenerator -reports:./TestResults/**/coverage.cobertura.xml -targetdir:./TestResults/CoverageReport -reporttypes:MarkdownSummary
        continue-on-error: true

      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Generate Coverage Report
        run: |
          reportgenerator -reports:./TestResults/**/coverage.cobertura.xml -targetdir:./TestResults/CoverageReport -reporttypes:MarkdownSummary
        continue-on-error: true

      - name: Display Coverage Report
        run: |
          cat ./TestResults/CoverageReport/Summary.md >> $GITHUB_STEP_SUMMARY

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r integration_tests/requirements.txt

      - name: Run application
        run: dotnet run --no-build --configuration Release --urls=${{ secrets.LOCALHOST }} & sleep 5

      - name: Run Python integration tests with coverage
        run: |
          pytest --cov=integration_tests --cov-report=xml --cov-report=term-missing
          coverage xml -o coverage.xml
          coverage report --format=markdown >> $GITHUB_STEP_SUMMARY
          coverage report --fail-under=90

      - name: Publish integration test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-results
          path: '**/coverage.xml'

      - name: Notify Discord about Test Completion
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{"content": "âœ… **Testing stage completed successfully** for staging branch, despite potential errors."}' \
          ${{inputs.DEPLOY_WEBHOOK_URL}}